services:
  postgres:
    image: postgres:15-alpine
    container_name: blogcms_postgres_prod
    env_file:
      - ./environments/.env.production.backend
    environment:
      POSTGRES_DB: blogcms_prod
      POSTGRES_USER: bloguser
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - blog_prod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloguser -d blogcms_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: blogcms_backend_prod
    env_file:
      - ./environments/.env.production.backend
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blog_prod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: blogcms_frontend_prod
    env_file:
      - ./environments/.env.production.frontend
    ports:
      - "3200:3200"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - blog_prod_network
    restart: unless-stopped
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:

networks:
  blog_prod_network:
    driver: bridge