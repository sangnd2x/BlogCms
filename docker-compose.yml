services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blogcms_postgres
    environment:
      POSTGRES_DB: blogcms
      POSTGRES_USER: bloguser
      POSTGRES_PASSWORD: blogpassword
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloguser -d blogcms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: blogcms_backend
    env_file:
      - ./backend/.env.local
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blog_network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: blogcms_frontend
    env_file:
      - ./frontend/.env.local
    ports:
      - "3200:3200"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
      - /app/.next        # Prevent overwriting .next build cache
    depends_on:
      - backend
    networks:
      - blog_network
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:

# Custom network for service communication
networks:
  blog_network:
    driver: bridge